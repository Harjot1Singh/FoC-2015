var pg = require("pg"),
    distance = require("google-distance");

//Wrapper for all database functionality
var DB = function() {
    //Environment specific constructor
    if (process.env.development == "true") {
        //Database in C9 environment - remember to set development = true in environment
        this.connString = "postgres://postgres:postgres@localhost/biscuit";
    }
    else {
        //TBC username + password + ip
        this.connString = "postgres://postgres:postgres@randomhost/biscuit";
    }

};


//Checks if tables exist, if not, creates them
DB.prototype.setupDB = function() {
    var client = new pg.Client(this.connString);
    client.connect(function(err) {
        if (err) {
            return console.error('Could not connect to postgres', err);
        }
        //Create tblUsers
        client.query("CREATE TABLE IF NOT EXISTS tblUsers  ( \
                    id SERIAL, \
                    firstName VARCHAR(50), \
                    lastName VARCHAR(50), \
                    DOB DATE, \
                    number VARCHAR(20), \
                    email VARCHAR(100), \
                    serviceID VARCHAR(50) NOT NULL, \
                    serviceName VARCHAR(20) \
                    );", function(err, result) {
            if (err) {
                return console.error('Error:', err);
            }
            console.info('tblUsers processed');
        });
        //Create tblQueue
        client.query("CREATE TABLE IF NOT EXISTS tblQueue ( \
                    id SERIAL, \
                    userID INT, \
                    publicX FLOAT, \
                    publicY FLOAT, \
                    gpsX FLOAT, \
                    gpsY FLOAT, \
                    publicName VARCHAR(50), \
                    endDate DATE, \
                    activityName VARCHAR(50) \
                    );",
            function(err, result) {
                if (err) {
                    return console.error('Error:', err);
                }
                console.info('tblQueue processed');
            });

        //Create tblMatches
        client.query("CREATE TABLE IF NOT EXISTS tblMatches ( \
                    id SERIAL, \
                    userID INT, \
                    requestID INT, \
                    distanceFromVenue FLOAT, \
                    accepted BOOLEAN \
                    );",
            function(err, result) {
                if (err) {
                    return console.error('Error:', err);
                }
                console.info('tblMatches processed');
            });
        console.info('DB initialised successfully');
    });
};

/*
@parameter user (firstName, lastName, dob, number, email, pictureURL, serviceID, serviceName)
@parameter onComplete callback function(userID)
*/
DB.prototype.addUser = function(user, onComplete) {
    pg.connect(this.connString, function(err, client, done) {
        if (err) {
            return console.error('Error fetching client from pool', err);
        }

        //Temporarily stores user id that was generated by db on insert 
        var userID;
        //Insert the user entry
        client.query({
            text: 'SELECT id \
                FROM tblUsers \
                WHERE serviceID = $1 \
                AND serviceName = $2;',
            values: [user.serviceID, user.serviceName],
            name: 'get id'
        }).on('error', function(err) {
            console.log('Error:', err);
        }).on('row', function(row, result) {
            if (row.id) {
                userID = row.id;
            }
        }).on('end', function(err, result) {
            done();
            if (!userID) {
                console.log("Inserting new user");
                //Insert the user entry
                client.query({
                    text: 'INSERT INTO tblUsers \
                (firstname, lastname, email, dob, number, servicename, serviceid) \
                VALUES ($1, $2, $3, $4, $5, $6, $7) \
                RETURNING id;',
                    values: [user.firstName, user.lastName, user.email, user.DOB, user.number, user.serviceName, user.serviceID],
                    name: 'Insert user details'
                }).on('error', function(err) {
                    console.log('Error:', err);
                }).on('row', function(row, result) {
                    if (row.id) {
                        userID = row.id;
                    }
                }).on('end', function(err, result) {
                    done();
                    onComplete(userID);
                });
            }
            else onComplete(userID);
        });
    });
};

/*
@parameter userID 
@parameter matchDetails (userid, gpsx, gpsy, publicx, publicy, publicname, enddate, activityName)
@parameter onComplete callback function(requestID)
*/
DB.prototype.addRequest = function(userID, matchDetails, onComplete) {
    pg.connect(this.connString, function(err, client, done) {
        if (err) {
            done();
            return console.error('Error fetching client from pool', err);
        }
        //Insert match query
        var requestID;
        client.query({
            text: 'INSERT INTO tblQueue \
                    (userid, gpsx, gpsy, publicx, publicy, publicname, enddate, activityName) \
                    VALUES ($1, $2, $3, $4, $5, $6, $7, $8) \
                    RETURNING id;',
            values: [userID, matchDetails.gpsX, matchDetails.gpsY, matchDetails.publicX, matchDetails.publicY, matchDetails.publicName, matchDetails.endDate, matchDetails.activityName],
            name: 'Insert queue request'
        }).on('row', function(row, result) {
            if (row.id) {
                requestID = row.id;
            }
        }).on('end', function(err, result) {
            done();
            console.log('Inserted request', requestID, matchDetails.activityName, 'into the queue');
            //Callback and finish
            onComplete(requestID);
        });
    });
};

//finds matches and sets them up in tblMatches
DB.prototype.findMatches = function(userID, requestID, activityName, publicX, publicY, onComplete) {
    pg.connect(this.connString, function(err, client, done) {
        if (err) {
            done();
            return console.error('Error fetching client from pool', err);
        }
        client.query({
            text: 'SELECT * \
                   FROM tblUsers, tblQueue \
                    WHERE tblQueue.userID = tblUsers.id \
                    AND tblQueue.activityName = $1 \
                    AND tblUsers.id = $2',
            values: [activityName, userID],
            name: 'Find similar activites '
        }).on('row', function(row, result) {
            //Check distances between all of these and submitted
            console.log(row);
            console.log(row.publicx + ',' + row.publicy);
            console.log(publicX + ',' + publicY);
            distance.get({
                    origin: row.publicx + ',' + row.publicy,
                    destination: publicX + ',' + publicY,
                    units: "imperial",
                    mode: "walking"
                },
                function(err, data) {
                    if (err) return console.log(err);
                    console.log("DISTANCE:", data);
                });
        }).on('end', function(err, result) {

            done();
            //Callback and finish
            // onComplete(requestID);
        });
    });
};

DB.prototype.getMatches = function(userID, onComplete) {
    pg.connect(this.connString, function(err, client, done) {
        if (err) {
            done();
            return console.error('Error fetching client from pool', err);
        }
        //Insert match query
        var requestID;
        client.query({
            text: "SELECT * \
                    FROM tblQueues, tblUsers, tblMatches \
                    WHERE tblUsers.mat = tblQueues.userID \
                    AND ;",
            values: [],
            name: 'Insert queue request'
        }).on('row', function(row, result) {
            if (row.id) {
                requestID = row.id;
            }
        }).on('end', function(err, result) {
            done();
            console.log('Inserted request', requestID, matchDetails.activityName, 'into the queue');
            //Callback and finish
            onComplete(requestID);
            client.query({
                text: "SELECT * \
                    FROM tblQueues, tblUsers, tblMatches \
                    WHERE tblUsers.mat = tblQueues.userID \
                    AND ;",
                values: [],
                name: 'Insert queue request'
            }).on('row', function(row, result) {
                if (row.id) {
                    requestID = row.id;
                }
            }).on('end', function(err, result) {
                done();
                console.log('Inserted request', requestID, matchDetails.activityName, 'into the queue');
                //Callback and finish
                onComplete(requestID);
            });
        });
    });
};

module.exports = DB;